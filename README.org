#+TITLE: NixOS System Configurations



* Flakes

** Setup
These configs use nix flakes which are not stable yet. To enable them we need to
overwrite the nix package by adding the following to the current
=/etc/nixos/configuration.nix=.

#+begin_src nix
nix.package = pkgs.nixUnstable;
nix.extraOptions = ''
  experimental-features = nix-command flakes
'';
#+end_src

After =nixos-rebuild switch= we should have =nix= version >= 2.4.

When bootstrapping the installation for a new host we can get nix by installing
=nixUnstable= with =nix-env=.

#+begin_src sh
nix-env -iA nixpkgs.nixUnstable
#+end_src

To enable flakes we then update =/etc/nix/nix.conf=.

#+begin_src sh
echo "experimental-features = nix-command flakes" >> /etc/nix/nix.conf
#+end_src

** Usage

The =flake.nix= file in this repository contains the flakes for the individual
hosts. This file and all other =*.nix= files are generated by [[https://orgmode.org/manual/Extracting-Source-Code.html][tangling]]
=README.org= (the file you're currently reading). The individual =*.nix= files
should not be modified directly since those changes will be overwritten the next
time =org-babel-tangle= is called.

#+begin_src nix :tangle flake.nix :noweb yes
{
  description = "NixOS System Configurations";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-21.05";
  };

  outputs = { self, nixpkgs }: {
    nixosConfigurations = {
      <<flake/hosts>>
    };
  };

}
#+end_src

* Hosts
** beholder
*** TODO Bootstrapping
*** Hardware
**** Info

Some hardware info displayed by the Hetzner rescue system after login.

#+begin_src
CPU1: AMD Ryzen 7 3700X 8-Core Processor (Cores 16)
Memory:  64251 MB
Disk /dev/sda: 10000 GB (=> 9314 GiB)
Disk /dev/sdb: 10000 GB (=> 9314 GiB)
Total capacity 18 TiB with 2 Disks
#+end_src

**** Configuration

The basic hardware configuration was created by =nixos-generate-config=.

#+begin_src nix :tangle ./hosts/beholder/hardware-configuration.nix :mkdirp yes :noweb yes
{ config, lib, pkgs, modulesPath, ... }:

{
  imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];

  <<beholder/hardware/boot>>

  <<beholder/hardware/filesystems>>

  swapDevices = [ ];

  powerManagement.cpuFreqGovernor = lib.mkDefault "ondemand";
}
#+end_src

Since we are using encrypted partitions and have no way to unlock them without a
remote connection, we need to make sure the network interface is available
within the =initrd=. In this case we depend on the =r8169= module to be
available during boot. Also tell the =initrd= whick device needs encryption.

#+begin_src nix :noweb-ref beholder/hardware/boot :noweb-sep ""
boot = {
  kernelModules = [ "kvm-amd" ];
  initrd = {
    availableKernelModules = [ "ahci" "sd_mod" "r8169" ];
    luks.devices."data".device = "/dev/disk/by-uuid/db20b995-5cab-45ae-b1b9-0ba20a73eda6";
  };
};
#+end_src


#+begin_src nix :noweb-ref beholder/hardware/filesystems :noweb-sep ""
fileSystems."/" =
  { device = "/dev/disk/by-uuid/4328df85-8112-495a-ba18-2b23d6fa54e2";
    fsType = "btrfs";
    options = [ "subvol=root" ];
  };

fileSystems."/home" =
  { device = "/dev/disk/by-uuid/4328df85-8112-495a-ba18-2b23d6fa54e2";
    fsType = "btrfs";
    options = [ "subvol=home" ];
  };

fileSystems."/nix" =
  { device = "/dev/disk/by-uuid/4328df85-8112-495a-ba18-2b23d6fa54e2";
    fsType = "btrfs";
    options = [ "subvol=nix" ];
  };

fileSystems."/var" =
  { device = "/dev/disk/by-uuid/4328df85-8112-495a-ba18-2b23d6fa54e2";
    fsType = "btrfs";
    options = [ "subvol=var" ];
  };

fileSystems."/swap" =
  { device = "/dev/disk/by-uuid/4328df85-8112-495a-ba18-2b23d6fa54e2";
    fsType = "btrfs";
    options = [ "subvol=swap" ];
  };

fileSystems."/boot" =
  { device = "/dev/disk/by-uuid/22528ebc-c073-447d-a2cb-74854cc11a19";
    fsType = "ext4";
  };

fileSystems."/boot-fallback" =
  { device = "/dev/disk/by-uuid/1da184b8-3e1c-4492-9bc1-fd04a2d0e343";
    fsType = "ext4";
  };
#+end_src
*** System

Add this host to the flakes =nixosConfigurations=.

#+begin_src nix :noweb-ref flake/hosts :noweb-sep ""
beholder = nixpkgs.lib.nixosSystem {
  system = "x86_64-linux";
  modules = [
    ./hosts/beholder/configuration.nix
  ];
};
#+end_src



#+begin_src nix :noweb yes :tangle ./hosts/beholder/configuration.nix :mkdirp yes
{ config, pkgs, ... }:

{
  imports = [
    ./hardware-configuration.nix
    ../../modules/common.nix
    ../../users/wose.nix
    ../../users/linda.nix
  ];

  <<beholder/cfg/kernel>>

  <<beholder/cfg/bootloader>>

  <<beholder/cfg/initrd>>

  <<beholder/cfg/network>>

  <<beholder/cfg/i18n>>

  <<beholder/cfg/packages>>

  <<beholder/cfg/services>>

  system.stateVersion = "21.05";
}
#+end_src

**** Kernel

I had some trouble during the initial installation regarding the network
connectivity after =Grub= finished it's thing. There was no ssh connection
possible to unlock the encrypted partition. I fist suspected the predictable
network interface naming to do something ... well unpredictable. So I disabled
it. The resuce system I used to install and troubleshoot the system was Debian
based and had this feature also turned off.

But this changed nothing. I then mistrusted the NixOS configuration to configure
the =initrd= network properly (IP address, netmask, etc) and added the
corresponding kernel parameters manually.

This also didn't fix the problem. As it turned out the network interface driver
was missing in the =initrd=. However, I kept the manually set kernel parameters
for now.

#+begin_src nix :noweb-ref beholder/cfg/kernel :noweb-sep ""

boot.kernelParams = [
  "net.ifnames=0"
  "ip=136.243.47.110::136.243.47.65:255.255.255.192:beholder:eth0:none"
];

#+end_src

**** Bootloader

We install =Grub= on both disks, so we can still boot if one fails. We also need
to mirror the boot partition, which holds the kernel, initrd etc. We do this by
using the NixOS option =mirroredBoots= and save us the trouble with configuring
another RAID array.

#+begin_src nix :noweb-ref beholder/cfg/bootloader :noweb-sep ""

boot.loader.grub = {
  enable = true;
  version = 2;
  efiSupport = false;
  devices = [ "/dev/sda" ];
  mirroredBoots = [
    {
      path = "/boot-fallback";
      devices = [ "/dev/sdb" ];
    }
  ];
};

#+end_src

**** initrd

To be able to unlock the encrypted partition we need to enable networking and a
ssh server within the initrd. And also set some public keys which should be
allowed to login. The host key was created during the inital bootstrap and
should be distributed to the clients to make sure they are talking to the right
server when sending the luks passphrase.

#+begin_src nix :noweb-ref beholder/cfg/initrd :noweb-sep ""

boot.initrd.network = {
  enable = true;
  ssh = {
    enable = true;
    port = 22;
    authorizedKeys = config.users.users.wose.openssh.authorizedKeys.keys;
    hostKeys = [ "/etc/secrets/initrd/ssh_host_ed25519_key" ];
  };
};

#+end_src

**** Network

The hardest choice during every installation of a new system: the hostname. I'm
using the D&D 5e Monster Manual as name source.

#+begin_src nix :noweb-ref beholder/cfg/network :noweb-sep ""

networking = {
  hostName = "beholder";
  domain = "zuendmasse.de";
};

#+end_src


We only have one NIC. Hetzner doesn't use DHCP so we disable it and use the
provided static configuration.

#+begin_src nix :noweb-ref beholder/cfg/network :noweb-sep ""

networking = {
  usePredictableInterfaceNames = false;

  useDHCP = false;
  interfaces.eth0 = {
    ipv4.addresses = [
      {
        address = "136.243.47.110";
        prefixLength = 26;
      }
    ];
    ipv6.addresses = [
      {
        address = "2a01:4f8:212:f45::1";
        prefixLength = 64;
      }
    ];
  };

  defaultGateway = "136.243.47.65";
  defaultGateway6 = {
    address = "fe80::1";
    interface = "eth0";
  };
};

#+end_src


Those are name servers from Hetzner... except the last one.

#+begin_src nix :noweb-ref beholder/cfg/network :noweb-sep ""

networking.nameservers = [
  "213.133.98.98"
  "213.133.99.99"
  "213.133.100.100"
  "2a01:4f8:0:a0a1::add:1010"
  "2a01:4f8:0:a102::add:9999"
  "2a01:4f8:0:a111::add:9898"
  "8.8.8.8"
];

#+end_src

**** i18n

Set the time zone and default locale.

#+begin_src nix :noweb-ref beholder/cfg/i18n :noweb-sep ""

time.timeZone = "Europe/Berlin";

i18n.defaultLocale = "en_US.UTF-8";

#+end_src

**** Users
We create the users on this system by importing the corresponding
=users/username.nix= files.

**** Packages
#+begin_src nix :noweb-ref beholder/cfg/packages :noweb-sep ""
environment.systemPackages = with pkgs; [
  emacs-nox
  fd
  pinentry-emacs
  ripgrep
];
#+end_src
**** Services
***** OpenSSH

We disable password authentication and root login. This will also open port 22
in the firewall.

#+begin_src nix :noweb-ref beholder/cfg/services :noweb-sep ""

services.openssh = {
  enable = true;
  permitRootLogin = "no";
  passwordAuthentication = false;
};

#+end_src

* Common Settings

We'll need/want somethings to be available on all hosts. We can export it into
modules and import it in each host.

#+begin_src nix :tangle ./modules/common.nix :mkdirp yes :noweb yes
{ pkgs, ... }:

{
  <<common/systempackages>>

  <<common/nix>>

  <<common/userconfig>>
}
#+end_src


** System Packages

To be able to acutally do something with a freshly installed system we need some
tools.

#+begin_src nix :noweb-ref common/systempackages :noweb-sep ""
environment.systemPackages = with pkgs; [
  git
  gnupg
  gnutls
  htop
  pass
  pinentry
  vim
  vimPlugins.vim-nix
  wget
  zsh
];
#+end_src

** Nix

Since nix flakes are not stable yet, we need to make sure we get =nix= in
version =>=2.4=.

#+begin_src nix :noweb-ref common/nix :noweb-sep ""

nix = {
  package = pkgs.nixUnstable;
  extraOptions = ''
    experimental-features = nix-command flakes
  '';
};

#+end_src

** User configuration

Let's make sure user can manage their passwords outside of this configuration.

#+begin_src nix :noweb-ref common/userconfig :noweb-sep ""

users.mutableUsers = true;

#+end_src

* Users
** wose

This user thinks he knows what he does. We set his initial password to be able
to gain =root= after the first login throgh ssh after intial bootstrap of a
machine.

#+begin_src nix :tangle ./users/wose.nix :mkdirp yes
{ config, ... }:

{
  users.users.wose = {
      initialHashedPassword = "$6$KQo7A0p2cYsB3$Kpw2XUByh1gPiUA/JQC63w7WlVOrsWX5HqRudSqxjzBJY.R/hiyYUW24HAZSP54iFxUCrqRYDhghM3PBpB8XN1";
      isNormalUser = true;
      extraGroups = [ "wheel" ];
      openssh.authorizedKeys.keys = [
        "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDqhXu3cahNdm5EjMbJXgCIMTOqVXD/SO5sRu9ep/EBOAQGQiUYg7Eqx7Ka7gCj2xi+X797DejfgOxFMm1jk4L4YQ5oKc+aehLZM/JLM4dNIqU7tGt2pKv7oGJMVi/u3HX6VPcPqdPIvayBN6Odw4aqtaQY6Pr5R9SJFCftWaeLFXGVOL0FauzMrwhxVgYId5RXtEyVJv9npe0wYEFemnNO4kktsxHxKHC8e+EzggGNRQyCyWOr8arXvjqM/HI5ZnqpWP8/R0hXOHw1WbziHBYNJNT4uwkwXBf2496mCxJCNerJQh/qF/fUUU/C1ix24EHDyx+FkA0aheylAjNAgSopGNfvkQ3Hqz8lnRiyu9WDS6W7liras/oJCmcsh/BmCWO+BQQ6P6q9Y2oC3KM+Rj8WWykjfCchTQeuz1GGx9sQOS8Js2DROlWDGKg4NoY0Clp8brcTmRR+8TiZQak7p3zg6CgFPzZfLPk7BA3gHLO5te753TK8jsKZegdzH6gA0hM="
        "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDgV2nv344CXTk+SX89W2QMPHLJy8VJu8V40uJPQQfaa8m/6Ept51HGfNwTF2E8C6n5jo3Bno1nyJNkuSSop6eYgmnFrkvoay3YQWTH4ZGWUl+vrFIRWlNdlMRASeRuBnMlm2Sp5dm0k7Clqzr2NN0Zq04WdHOi4JO+wTqV73+qdrnB1Sug3kYTyZKM4+Mr+fuhnecJTHw3fQfTYE7Pm9bMMCZjq+orrxyMBIFsDA4ssH6g5c/juKPCm3LC/el5MYjhzG0RhGTzKU1cf4jc3qttJF65FsfhFb3qpwlyrlZP5JJ67N3VyYroQgyoLf9N7UwsfDg73mvn7owGjoOh3PewrjMQwdRtiOaK9oR7+iggFaNNdt/xBHdeeCrjNJPqf3OElQrcXJldlYsAazE9aLCRc7CWHDk39tRAYWGobAkRXuMaLosLt+OtzVvqOYFHlNycvBoGX+TMRERiP9Xqb+hqa9z8qOlIbuwHJ7PptlL556tFfrR1lRE7apufFgS3yvE= wose@elric"
        "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDiFoKZl/CnDvod0zeBnZjreEVyluQ8Lwcno7wwh73UwXG9qDRBinZqo3iWRsHJM6lqiDQW1IOndbW3uOkyWJsWjb/FI8EMPQpWt9ghmIwqAkEJ+uvJiB/Zhh/vYG642rCzuYQ4aFLlWBRpQWMPacxpvLrH/CIwhH5GoGxphOhew5UtBqGq5kaHucRWB0U9ytpHSRUyHAx6wQEIC1LSPHjDZcw/02RU1gWGFnOcO6wtw0E7AZ3cN4w4nJsVEHUXnbA9M2ODhJjz+YNxw7VsfTbOtVBd/9qndO0QAeVis3/9+1Y2KBG9wde/PbNlk0qsWPfaVX3h+0YyllKNjaxWlgDb+4xweOgdM+4cALS78EO1THOr7KVjJIct3EXcuywn4PjTDAa84Bcz+kNMONjVFabn7nRHnzoEIV5TtlAYonktB22DRmIpjByS0oQmKB3mKCGNAIfiDnmUATkpq34KdCIv4yNkmThr/CBWm7G0ijlMNaAcV6Ts6fg+6T2hHT6Fxo92L4H9WMk4pd2f0CJ41dmYigL8EOfearrWfjLgkulgSvuTYBd5avGxB/OhnGBJkW+vFaCvCwKe1nzo5r4ei40K1e3yZqVpQd9Qq7FNg9qMSNydh049lnNSb0fOkahinps0198gOtNiBC6cTxqRLv0yM2Q1QiwC5Habu4cKBSXglw=="
        "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC+FNrrRnVNqeBjuEZt5F0WhHBI/OtYgnUrP8NHYsZoY/9dLret+BryhhQBARZFj0eoKGjT2X50FyJq6/7g4BCYmYtXbe/HxkDXa6IEoeSc9uWC8HXaNKibuCIPWxLgDOvuu6YuFVELO7O5xr2JwrY4AoLhVeeGIPUcTPnOoukKQ0tWSu4BmfYdzF9bnfY+qoyDP0funIOg3r3fWKYQEiWcXfZ6yn10yoTLyqojVKIVO2w5SQRK5AHyI5PtOOGOJf8CR3lQZEH9kbLDA5RHOzvXa0G8p6/OtdaUymPBnfB4V9KovhEGej0L3S9lShZq2j/zrkqY1JlFrxzqzmpJNoF90faUwOeggM0VN0pRAMkkSebOYej5pCNRZaQSONBHgBGl4JN7PlDaE7NRbnNlVDGOlk2nxn/T9vlwx/7ww0Rz4YHgmvDLuSNyKvtzI2Mq+tvIg0tcV9Euo85UpaZfAF9WhT0tnX09rotnzf4avE6L08+uZDdInGRC+d3kRbpxcsXLhl/8/lXtaquLijtLmhGQ6UurPioQSgR91dy9hDjGAeahmEcb2OlwNCp5sJXsuw3f1AonrmUi7zvdcP/dZ3lHSn/AqTxUw4JDDDUmR5Vhs3QEWwD5oODPB2YVp0T9i0meWZ5ptrgcvr7/R00WY/1ELJ2Vg4LUMZ4IJuZ327GJKw=="
      ];
  };
}
#+end_src

** linda

#+begin_src nix :tangle ./users/linda.nix :mkdirp yes
{ config, ... }:

{
  users.users.linda = {
    isNormalUser = true;
    openssh.authorizedKeys.keys = [
      "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDRXYbTbEfpsbRDPUS1qfimY22k1KsUBTgUJyK2GKsKYnv06bAH+WOqFV7jc7Ps564VkE1n6Bo+rltKC3qjVJlzxSp23iBNt3mY/R1rSF2ENgkynKHtql5Bxh4CB5t0ZSeyBCb+awc7HCbOeIVmYNWZQalen4d2BXcwmTx05U7f5rfoNq9lkSMAdfHZYunsej0/EC1FVE0lyC1x7Ojj73u/SAaKUQbZD4fhMIIUVY7/ca6wAigeI8DRtsqTCZWCL07H2XOWv9E5aKPA9HJHd3GO3z8ewhNc+U/V16IYpt7saRLWH2DpNktZ5Y9goFangdiCVMTodcftPqi/tgCVJuPf linda@weatherwax"
      "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCpfvxkWvyREXMeDrmmVSnX7vliaRjMAFlo1n8zRl47ypR9K8wP5UE+jvOcHjtXfBHtZI3HTUSqjLPOVcJn0w5DILDsb8YwNR6+bFtRCcC4JOhkcZfjQsdqufANOmoyuXgsGNKIErQypz/AMmmzIdoCvaZccPUBpy4VvUJJo/H7DTo5Nq6y2sG3/LkKTFQf/aft3YRkcMr/i8Fe0PtDSj1ASQZpXuCN/V1YYgrQRixKjPFScalJVA/is5nlMeTka1Qx4G/MsYxY2ml2rN1BqH93pk6+k6NFOHwddHhWU2omFzDTY6XoFbXH7iWrx/bcWfge9tv5UEbi1Rq5CnxQw4AP linda@knudsen"
    ];
  };
}
#+end_src
